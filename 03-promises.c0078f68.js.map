{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,kBACnCE,UAAWH,SAASC,cAAc,iBAClCG,YAAaJ,SAASC,cAAc,oBA8BtC,SAASI,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC7BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IArCLQ,QAAQC,IAAIlB,GAEZA,EAAKC,KAAKkB,iBAAiB,UAG3B,SAAkBC,GAChBA,EAAEC,iBAEF,IAAIC,EAAQC,OAAOvB,EAAKI,WAAWoB,OAC7BC,EAAOF,OAAOvB,EAAKK,UAAUmB,OAC7BE,EAASH,OAAOvB,EAAKM,YAAYkB,OAEvCP,QAAQC,IAAII,EAAOG,EAAMC,GAEzB,IAAK,IAAIC,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAChCpB,EAAcoB,EAAGL,GACdM,MAAK,SAAAC,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MACjBX,EAAAgC,OAAOC,QAAQ,uBAAwCC,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAE9DwB,OAAM,SAAAJ,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MAClBX,EAAAgC,OAAOI,QAAQ,sBAAqCF,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAE9Da,GAASG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  firstDelay: document.querySelector('[name=\"delay\"]'),\n  delayStep: document.querySelector('[name=\"step\"]'),\n  amountInput: document.querySelector('[name=\"amount\"]')\n};\n\nconsole.log(refs);\n\nrefs.form.addEventListener('submit', onSubmit);\n\n\nfunction onSubmit(e) { \n  e.preventDefault();\n\n  let delay = Number(refs.firstDelay.value);\n  const step = Number(refs.delayStep.value);\n  const amount = Number(refs.amountInput.value);\n\n  console.log(delay, step, amount);\n\n  for (let i = 1; i <= amount; i += 1) { \n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += step; \n  } \n\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n \n  return new Promise((resolve, reject) => {\n  setTimeout(() => {\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  }, delay);\n  });\n  \n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","firstDelay","delayStep","amountInput","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","console","log","addEventListener","e","preventDefault","delay1","Number","value","step","amount","i","then","param","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.c0078f68.js.map"}